{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI Keycloak Integration Introduction Welcome to fastapi-keycloak . This projects goal is to ease the integration of Keycloak (OpenID Connect) with Python, especially FastAPI. FastAPI is not necessary but is encouraged due to specific features. Currently, this package supports only the password flow . However, the get_current_user() method accepts any JWT that was signed using Keycloak's private key. Caution This package is currently under development and is not yet officially released. However, you may still use it and contribute to it. TLDR; FastAPI Keycloak enables you to do the following things without writing a single line of additional code: Verify identities and roles of users with Keycloak Get a list of available identity providers Create/read/delete users Create/read/delete roles Assign/remove roles from users Implement the password flow (login/callback/logout) Example This example assumes you use a frontend technology (such as React, Vue, or whatever suits you) to render your pages and merely depicts a protected backend app.py import uvicorn from fastapi import FastAPI , Depends from fastapi_keycloak import FastAPIKeycloak , OIDCUser app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) @app . get ( \"/premium\" , tags = [ \"secured-endpoint\" ]) def premium ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"premium\" ]))): return f 'Hi premium user { user } ' @app . get ( \"/user/roles\" , tags = [ \"secured-endpoint\" ]) def user_roles ( user : OIDCUser = Depends ( idp . get_current_user )): return f ' { user . roles } ' if __name__ == '__main__' : uvicorn . run ( 'app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"Introduction"},{"location":"#fastapi-keycloak-integration","text":"","title":"FastAPI Keycloak Integration"},{"location":"#introduction","text":"Welcome to fastapi-keycloak . This projects goal is to ease the integration of Keycloak (OpenID Connect) with Python, especially FastAPI. FastAPI is not necessary but is encouraged due to specific features. Currently, this package supports only the password flow . However, the get_current_user() method accepts any JWT that was signed using Keycloak's private key. Caution This package is currently under development and is not yet officially released. However, you may still use it and contribute to it.","title":"Introduction"},{"location":"#tldr","text":"FastAPI Keycloak enables you to do the following things without writing a single line of additional code: Verify identities and roles of users with Keycloak Get a list of available identity providers Create/read/delete users Create/read/delete roles Assign/remove roles from users Implement the password flow (login/callback/logout)","title":"TLDR;"},{"location":"#example","text":"This example assumes you use a frontend technology (such as React, Vue, or whatever suits you) to render your pages and merely depicts a protected backend","title":"Example"},{"location":"#apppy","text":"import uvicorn from fastapi import FastAPI , Depends from fastapi_keycloak import FastAPIKeycloak , OIDCUser app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) @app . get ( \"/premium\" , tags = [ \"secured-endpoint\" ]) def premium ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"premium\" ]))): return f 'Hi premium user { user } ' @app . get ( \"/user/roles\" , tags = [ \"secured-endpoint\" ]) def user_roles ( user : OIDCUser = Depends ( idp . get_current_user )): return f ' { user . roles } ' if __name__ == '__main__' : uvicorn . run ( 'app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"app.py"},{"location":"installation/","text":"Installation pip install fastapi-keycloak Caution This package is currently under development and is not yet officially released. However, you may still use it and contribute to it.","title":"Installation"},{"location":"installation/#installation","text":"pip install fastapi-keycloak Caution This package is currently under development and is not yet officially released. However, you may still use it and contribute to it.","title":"Installation"},{"location":"quick-start/","text":"Example Usage from typing import List , Optional import uvicorn from fastapi import FastAPI , Depends , Query , Body from pydantic import SecretStr from fastapi_keycloak import FastAPIKeycloak , OIDCUser , UsernamePassword , HTTPMethod app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) # Admin @app . post ( \"/proxy\" , tags = [ \"admin-cli\" ]) def proxy_admin_request ( relative_path : str , method : HTTPMethod , additional_headers : dict = Body ( None ), payload : dict = Body ( None )): return idp . proxy ( additional_headers = additional_headers , relative_path = relative_path , method = method , payload = payload ) @app . get ( \"/identity-providers\" , tags = [ \"admin-cli\" ]) def get_identity_providers (): return idp . get_identity_providers () @app . get ( \"/idp-configuration\" , tags = [ \"admin-cli\" ]) def get_idp_config (): return idp . open_id_configuration # User Management @app . get ( \"/users\" , tags = [ \"user-management\" ]) def get_users (): return idp . get_all_users () @app . get ( \"/user\" , tags = [ \"user-management\" ]) def get_user_by_query ( query : str = None ): return idp . get_user ( query = query ) @app . post ( \"/users\" , tags = [ \"user-management\" ]) def create_user ( first_name : str , last_name : str , email : str , password : SecretStr , id : str = None ): return idp . create_user ( first_name = first_name , last_name = last_name , username = email , email = email , password = password . get_secret_value (), id = id ) @app . get ( \"/user/ {user_id} \" , tags = [ \"user-management\" ]) def get_user ( user_id : str = None ): return idp . get_user ( user_id = user_id ) @app . delete ( \"/user/ {user_id} \" , tags = [ \"user-management\" ]) def delete_user ( user_id : str ): return idp . delete_user ( user_id = user_id ) @app . put ( \"/user/ {user_id} /change-password\" , tags = [ \"user-management\" ]) def change_password ( user_id : str , new_password : SecretStr ): return idp . change_password ( user_id = user_id , new_password = new_password ) @app . put ( \"/user/ {user_id} /send-email-verification\" , tags = [ \"user-management\" ]) def send_email_verification ( user_id : str ): return idp . send_email_verification ( user_id = user_id ) # Role Management @app . get ( \"/roles\" , tags = [ \"role-management\" ]) def get_all_roles (): return idp . get_all_roles () @app . get ( \"/role/ {role_name} \" , tags = [ \"role-management\" ]) def get_role ( role_name : str ): return idp . get_roles ([ role_name ]) @app . post ( \"/roles\" , tags = [ \"role-management\" ]) def add_role ( role_name : str ): return idp . create_role ( role_name = role_name ) @app . delete ( \"/roles\" , tags = [ \"role-management\" ]) def delete_roles ( role_name : str ): return idp . delete_role ( role_name = role_name ) # User Roles @app . post ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def add_roles_to_user ( user_id : str , roles : Optional [ List [ str ]] = Query ( None )): return idp . add_user_roles ( user_id = user_id , roles = roles ) @app . get ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def get_user_roles ( user_id : str ): return idp . get_user_roles ( user_id = user_id ) @app . get ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def get_user_roles ( user_id : str ): return idp . get_user_roles ( user_id = user_id ) @app . delete ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def delete_roles_from_user ( user_id : str , roles : Optional [ List [ str ]] = Query ( None )): return idp . remove_user_roles ( user_id = user_id , roles = roles ) # User Requests @app . get ( \"/protected\" , tags = [ \"example-user-request\" ]) def protected ( user : OIDCUser = Depends ( idp . get_current_user ())): return user @app . get ( \"/current_user/roles\" , tags = [ \"example-user-request\" ]) def get_current_users_roles ( user : OIDCUser = Depends ( idp . get_current_user ())): return user . roles @app . get ( \"/company/edit\" , tags = [ \"example-user-request\" ]) def company_admin ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"company_admin\" ]))): return f 'Hi company admin { user } ' @app . get ( \"/login\" , tags = [ \"example-user-request\" ]) def login ( user : UsernamePassword = Depends ()): return idp . user_login ( username = user . username , password = user . password . get_secret_value ()) # Auth Flow @app . get ( \"/login-link\" , tags = [ \"auth-flow\" ]) def login_redirect (): return idp . login_uri @app . get ( \"/callback\" , tags = [ \"auth-flow\" ]) def callback ( session_state : str , code : str ): return idp . exchange_authorization_code ( session_state = session_state , code = code ) @app . get ( \"/logout\" , tags = [ \"auth-flow\" ]) def logout (): return idp . logout_uri if __name__ == '__main__' : uvicorn . run ( 'example_app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"Quick Start"},{"location":"quick-start/#example-usage","text":"from typing import List , Optional import uvicorn from fastapi import FastAPI , Depends , Query , Body from pydantic import SecretStr from fastapi_keycloak import FastAPIKeycloak , OIDCUser , UsernamePassword , HTTPMethod app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) # Admin @app . post ( \"/proxy\" , tags = [ \"admin-cli\" ]) def proxy_admin_request ( relative_path : str , method : HTTPMethod , additional_headers : dict = Body ( None ), payload : dict = Body ( None )): return idp . proxy ( additional_headers = additional_headers , relative_path = relative_path , method = method , payload = payload ) @app . get ( \"/identity-providers\" , tags = [ \"admin-cli\" ]) def get_identity_providers (): return idp . get_identity_providers () @app . get ( \"/idp-configuration\" , tags = [ \"admin-cli\" ]) def get_idp_config (): return idp . open_id_configuration # User Management @app . get ( \"/users\" , tags = [ \"user-management\" ]) def get_users (): return idp . get_all_users () @app . get ( \"/user\" , tags = [ \"user-management\" ]) def get_user_by_query ( query : str = None ): return idp . get_user ( query = query ) @app . post ( \"/users\" , tags = [ \"user-management\" ]) def create_user ( first_name : str , last_name : str , email : str , password : SecretStr , id : str = None ): return idp . create_user ( first_name = first_name , last_name = last_name , username = email , email = email , password = password . get_secret_value (), id = id ) @app . get ( \"/user/ {user_id} \" , tags = [ \"user-management\" ]) def get_user ( user_id : str = None ): return idp . get_user ( user_id = user_id ) @app . delete ( \"/user/ {user_id} \" , tags = [ \"user-management\" ]) def delete_user ( user_id : str ): return idp . delete_user ( user_id = user_id ) @app . put ( \"/user/ {user_id} /change-password\" , tags = [ \"user-management\" ]) def change_password ( user_id : str , new_password : SecretStr ): return idp . change_password ( user_id = user_id , new_password = new_password ) @app . put ( \"/user/ {user_id} /send-email-verification\" , tags = [ \"user-management\" ]) def send_email_verification ( user_id : str ): return idp . send_email_verification ( user_id = user_id ) # Role Management @app . get ( \"/roles\" , tags = [ \"role-management\" ]) def get_all_roles (): return idp . get_all_roles () @app . get ( \"/role/ {role_name} \" , tags = [ \"role-management\" ]) def get_role ( role_name : str ): return idp . get_roles ([ role_name ]) @app . post ( \"/roles\" , tags = [ \"role-management\" ]) def add_role ( role_name : str ): return idp . create_role ( role_name = role_name ) @app . delete ( \"/roles\" , tags = [ \"role-management\" ]) def delete_roles ( role_name : str ): return idp . delete_role ( role_name = role_name ) # User Roles @app . post ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def add_roles_to_user ( user_id : str , roles : Optional [ List [ str ]] = Query ( None )): return idp . add_user_roles ( user_id = user_id , roles = roles ) @app . get ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def get_user_roles ( user_id : str ): return idp . get_user_roles ( user_id = user_id ) @app . get ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def get_user_roles ( user_id : str ): return idp . get_user_roles ( user_id = user_id ) @app . delete ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def delete_roles_from_user ( user_id : str , roles : Optional [ List [ str ]] = Query ( None )): return idp . remove_user_roles ( user_id = user_id , roles = roles ) # User Requests @app . get ( \"/protected\" , tags = [ \"example-user-request\" ]) def protected ( user : OIDCUser = Depends ( idp . get_current_user ())): return user @app . get ( \"/current_user/roles\" , tags = [ \"example-user-request\" ]) def get_current_users_roles ( user : OIDCUser = Depends ( idp . get_current_user ())): return user . roles @app . get ( \"/company/edit\" , tags = [ \"example-user-request\" ]) def company_admin ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"company_admin\" ]))): return f 'Hi company admin { user } ' @app . get ( \"/login\" , tags = [ \"example-user-request\" ]) def login ( user : UsernamePassword = Depends ()): return idp . user_login ( username = user . username , password = user . password . get_secret_value ()) # Auth Flow @app . get ( \"/login-link\" , tags = [ \"auth-flow\" ]) def login_redirect (): return idp . login_uri @app . get ( \"/callback\" , tags = [ \"auth-flow\" ]) def callback ( session_state : str , code : str ): return idp . exchange_authorization_code ( session_state = session_state , code = code ) @app . get ( \"/logout\" , tags = [ \"auth-flow\" ]) def logout (): return idp . logout_uri if __name__ == '__main__' : uvicorn . run ( 'example_app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"Example Usage"},{"location":"reference/","text":"Instance to wrap the Keycloak API with FastAPI Examples: app = FastAPI () idp = KeycloakFastAPI ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-test-client\" , client_secret = \"some-secret\" , admin_client_secret = \"some-admin-cli-secret\" , realm = \"Test\" , callback_uri = f \"http://localhost:8081/callback\" ) admin_token : KeycloakToken property readonly Requests an AccessToken on the admin-cli client Returns: Type Description KeycloakToken A token, valid to perform admin actions open_id_configuration : dict cached property writable Returns Keycloaks Open ID Connect configuration Returns: Type Description dict Open ID Configuration public_key : str cached property writable Returns the Keycloak public key Returns: Type Description str Public key for JWT decoding user_auth_scheme : OAuth2PasswordBearer cached property writable Returns the auth scheme to register the endpoints with swagger Returns: Type Description OAuth2PasswordBearer Auth scheme for swagger __init__ ( self , server_url , client_id , client_secret , realm , admin_client_secret , callback_uri , app = None ) special FastAPIKeycloak constructor Parameters: Name Type Description Default server_url str The URL of the Keycloak server, with /auth suffix required client_id str The id of the client used for users required client_secret str The client secret required realm str The realm (name) required admin_client_secret str Secret for the admin-cli client required callback_uri str Callback URL of the instance, used for auth flows. Must match at least one Valid Redirect URIs of Keycloak required app FastAPI Optional FastAPI app to add the config to swagger None Source code in fastapi_keycloak/api.py def __init__ ( self , server_url : str , client_id : str , client_secret : str , realm : str , admin_client_secret : str , callback_uri : str , app : FastAPI = None ): \"\"\" FastAPIKeycloak constructor Args: server_url (str): The URL of the Keycloak server, with `/auth` suffix client_id (str): The id of the client used for users client_secret (str): The client secret realm (str): The realm (name) admin_client_secret (str): Secret for the `admin-cli` client callback_uri (str): Callback URL of the instance, used for auth flows. Must match at least one `Valid Redirect URIs` of Keycloak app (FastAPI): Optional FastAPI app to add the config to swagger \"\"\" self . server_url = server_url self . realm = realm self . client_id = client_id self . client_secret = client_secret self . admin_client_secret = admin_client_secret self . callback_uri = callback_uri self . config ( app ) self . _get_admin_token () config ( self , app ) Parameters: Name Type Description Default app FastAPI Optional FastAPI app to add the config to swagger required Returns: Type Description None Inplace method Source code in fastapi_keycloak/api.py def config ( self , app : FastAPI ): \"\"\" Args: app (FastAPI): Optional FastAPI app to add the config to swagger Returns: None: Inplace method \"\"\" if app : app . swagger_ui_init_oauth = { \"usePkceWithAuthorizationCodeGrant\" : True , \"clientId\" : self . client_id , \"clientSecret\" : self . client_secret } create_role ( self , role_name ) Create a role on the realm Parameters: Name Type Description Default role_name str Name of the new role required Returns: Type Description KeycloakRole If creation succeeded, else it will return the error Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole ) def create_role ( self , role_name : str ) -> KeycloakRole : \"\"\" Create a role on the realm Args: role_name (str): Name of the new role Returns: KeycloakRole: If creation succeeded, else it will return the error \"\"\" response = self . _admin_request ( url = self . roles_uri , data = { 'name' : role_name }, method = HTTPMethod . POST ) if response . status_code == 201 : return self . get_roles ( role_names = [ role_name ])[ 0 ] else : return response create_user ( self , first_name , last_name , username , email , password , enabled = True , initial_roles = None ) Parameters: Name Type Description Default first_name str The first name of the new user required last_name str The last name of the new user required username str The username of the new user required email str The email of the new user required password str The password of the new user required enabled bool True if the user should be able to be used True initial_roles List[str] The roles the user should posses None Returns: Type Description KeycloakUser If the creation succeeded Notes Also triggers the email verification email Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser ) def create_user ( self , first_name : str , last_name : str , username : str , email : str , password : str , enabled : bool = True , initial_roles : List [ str ] = None ) -> KeycloakUser : \"\"\" Args: first_name (str): The first name of the new user last_name (str): The last name of the new user username (str): The username of the new user email (str): The email of the new user password (str): The password of the new user enabled (bool): True if the user should be able to be used initial_roles List[str]: The roles the user should posses Returns: KeycloakUser: If the creation succeeded Notes: - Also triggers the email verification email \"\"\" data = { \"email\" : email , \"username\" : username , \"firstName\" : first_name , \"lastName\" : last_name , \"enabled\" : enabled , \"clientRoles\" : self . get_roles ( initial_roles ), \"credentials\" : [ { \"temporary\" : False , \"type\" : \"password\" , \"value\" : password } ], \"requiredActions\" : [ \"VERIFY_EMAIL\" ] } response = self . _admin_request ( url = self . users_uri , data = data , method = HTTPMethod . POST ) if response . status_code == 201 : user = self . get_user ( query = f 'username= { username } ' ) self . send_email_verification ( user . id ) return user else : return response exchange_authorization_code ( self , session_state , code ) Models the authorization code OAuth2 flow. Opening the URL provided by login_uri will result in a callback to the configured callback URL. The callback will also create a session_state and code query parameter that can be exchanged for an access token. Parameters: Name Type Description Default session_state str Salt to reduce the risk of successful attacks required code str The authorization code required Returns: Type Description KeycloakToken If the exchange succeeds Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakToken ) def exchange_authorization_code ( self , session_state : str , code : str ) -> KeycloakToken : \"\"\" Models the authorization code OAuth2 flow. Opening the URL provided by `login_uri` will result in a callback to the configured callback URL. The callback will also create a session_state and code query parameter that can be exchanged for an access token. Args: session_state (str): Salt to reduce the risk of successful attacks code (str): The authorization code Returns: KeycloakToken: If the exchange succeeds \"\"\" headers = { \"Content-Type\" : \"application/x-www-form-urlencoded\" } data = { \"client_id\" : self . client_id , \"client_secret\" : self . client_secret , \"code\" : code , \"session_state\" : session_state , \"grant_type\" : \"authorization_code\" , \"redirect_uri\" : self . callback_uri } response = requests . post ( url = self . token_uri , headers = headers , data = data ) return response get_all_roles ( self ) Get all roles of the Keycloak realm Returns: Type Description List[KeycloakRole] All roles of the realm Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_all_roles ( self ) -> List [ KeycloakRole ]: \"\"\" Get all roles of the Keycloak realm Returns: List[KeycloakRole]: All roles of the realm \"\"\" return self . _admin_request ( url = self . roles_uri , method = HTTPMethod . GET ) get_all_users ( self ) Returns all users of the realm Returns: Type Description List[KeycloakUser] All Keycloak users of the realm Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser , is_list = True ) def get_all_users ( self ) -> List [ KeycloakUser ]: \"\"\" Returns all users of the realm Returns: List[KeycloakUser]: All Keycloak users of the realm \"\"\" response = self . _admin_request ( url = self . users_uri , method = HTTPMethod . GET ) return response get_current_user ( self , required_roles = None ) Returns the current user based on an access token in the HTTP-header. Optionally verifies roles are possessed by the user Parameters: Name Type Description Default required_roles List[str] List of role names required for this endpoint None Returns: Type Description OIDCUser Decoded JWT content Source code in fastapi_keycloak/api.py def get_current_user ( self , required_roles : List [ str ] = None ) -> OIDCUser : \"\"\" Returns the current user based on an access token in the HTTP-header. Optionally verifies roles are possessed by the user Args: required_roles List[str]: List of role names required for this endpoint Returns: OIDCUser: Decoded JWT content \"\"\" def current_user ( token : OAuth2PasswordBearer = Depends ( self . user_auth_scheme )) -> OIDCUser : \"\"\" Decodes and verifies a JWT to get the current user Args: token OAuth2PasswordBearer: Access token in `Authorization` HTTP-header Returns: OIDCUser: Decoded JWT content \"\"\" options = { \"verify_signature\" : True , \"verify_aud\" : True , \"verify_exp\" : True } decoded_token : dict = jwt . decode ( token , self . public_key , options = options , audience = \"account\" ) user = OIDCUser . parse_obj ( decoded_token ) if required_roles : for role in required_roles : if role not in user . roles : raise HTTPException ( status_code = 403 , detail = f 'Role \" { role } \" is required to perform this action' ) return user return current_user get_identity_providers ( self ) Returns all configured identity Providers Returns: Type Description List[KeycloakIdentityProvider] All configured identity providers Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakIdentityProvider , is_list = True ) def get_identity_providers ( self ) -> List [ KeycloakIdentityProvider ]: \"\"\" Returns all configured identity Providers Returns: List[KeycloakIdentityProvider]: All configured identity providers \"\"\" return self . _admin_request ( url = self . providers_uri , method = HTTPMethod . GET ) . json () get_roles ( self , role_names ) Returns full entries of Roles based on role names Parameters: Name Type Description Default role_names List[str] Roles that should be looked up (names) required Returns: Type Description List[KeycloakRole] Full entries stored at Keycloak. Notes The Keycloak RestAPI will only identify RoleRepresentations that use name AND id which is the only reason for existence of this function Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_roles ( self , role_names : List [ str ]) -> List [ KeycloakRole ]: \"\"\" Returns full entries of Roles based on role names Args: role_names List[str]: Roles that should be looked up (names) Returns: List[KeycloakRole]: Full entries stored at Keycloak. Notes: - The Keycloak RestAPI will only identify RoleRepresentations that use name AND id which is the only reason for existence of this function \"\"\" roles = self . get_all_roles () return list ( filter ( lambda role : role . name in role_names , roles )) get_user ( self , user_id = None , query = '' ) Queries the keycloak API for a specific user either based on its ID or any native attribute Parameters: Name Type Description Default user_id str The user ID of interest None query str Query string. e.g. email=testuser@codespecialist.com or username=codespecialist '' Returns: Type Description KeycloakUser If the user was found Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser ) def get_user ( self , user_id : str = None , query : str = \"\" ) -> KeycloakUser : \"\"\" Queries the keycloak API for a specific user either based on its ID or any **native** attribute Args: user_id (str): The user ID of interest query: Query string. e.g. `email=testuser@codespecialist.com` or `username=codespecialist` Returns: KeycloakUser: If the user was found \"\"\" if user_id is None : response = self . _admin_request ( url = f ' { self . users_uri } ? { query } ' , method = HTTPMethod . GET ) return KeycloakUser ( ** response . json ()[ 0 ]) else : response = self . _admin_request ( url = f ' { self . users_uri } / { user_id } ' , method = HTTPMethod . GET ) return KeycloakUser ( ** response . json ()) get_user_roles ( self , user_id ) Gets all roles of an user Parameters: Name Type Description Default user_id str ID of the user of interest required Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_user_roles ( self , user_id : str ) -> List [ KeycloakRole ]: \"\"\" Gets all roles of an user Args: user_id (str): ID of the user of interest Returns: \"\"\" return self . _admin_request ( url = f ' { self . users_uri } / { user_id } /role-mappings/realm' , method = HTTPMethod . GET ) token_is_valid ( self , token , audience = None ) Validates an access token, optionally also its audience Parameters: Name Type Description Default token str The token to be verified required audience str Optional audience. Will be checked if provided None Returns: Type Description bool True if the token is valid Source code in fastapi_keycloak/api.py def token_is_valid ( self , token : str , audience : str = None ) -> bool : \"\"\" Validates an access token, optionally also its audience Args: token (str): The token to be verified audience (str): Optional audience. Will be checked if provided Returns: bool: True if the token is valid \"\"\" try : options = { \"verify_signature\" : True , \"verify_aud\" : audience is not None , \"verify_exp\" : True } jwt . decode ( token , self . public_key , options = options , audience = audience ) return True except ( ExpiredSignatureError , JWTError ): return False user_login ( self , username , password ) Models the password OAuth2 flow. Exchanges username and password for an access token. Parameters: Name Type Description Default username str Username used for login required password str Password of the user required Returns: Type Description KeycloakToken If the exchange succeeds Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakToken ) def user_login ( self , username : str , password : str ) -> KeycloakToken : \"\"\" Models the password OAuth2 flow. Exchanges username and password for an access token. Args: username (str): Username used for login password (str): Password of the user Returns: KeycloakToken: If the exchange succeeds \"\"\" headers = { \"Content-Type\" : \"application/x-www-form-urlencoded\" } data = { \"client_id\" : self . client_id , \"client_secret\" : self . client_secret , \"username\" : username , \"password\" : password , \"grant_type\" : \"password\" } response = requests . post ( url = self . token_uri , headers = headers , data = data ) return response","title":"API Reference"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.admin_token","text":"Requests an AccessToken on the admin-cli client Returns: Type Description KeycloakToken A token, valid to perform admin actions","title":"admin_token"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.open_id_configuration","text":"Returns Keycloaks Open ID Connect configuration Returns: Type Description dict Open ID Configuration","title":"open_id_configuration"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.public_key","text":"Returns the Keycloak public key Returns: Type Description str Public key for JWT decoding","title":"public_key"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.user_auth_scheme","text":"Returns the auth scheme to register the endpoints with swagger Returns: Type Description OAuth2PasswordBearer Auth scheme for swagger","title":"user_auth_scheme"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.__init__","text":"FastAPIKeycloak constructor Parameters: Name Type Description Default server_url str The URL of the Keycloak server, with /auth suffix required client_id str The id of the client used for users required client_secret str The client secret required realm str The realm (name) required admin_client_secret str Secret for the admin-cli client required callback_uri str Callback URL of the instance, used for auth flows. Must match at least one Valid Redirect URIs of Keycloak required app FastAPI Optional FastAPI app to add the config to swagger None Source code in fastapi_keycloak/api.py def __init__ ( self , server_url : str , client_id : str , client_secret : str , realm : str , admin_client_secret : str , callback_uri : str , app : FastAPI = None ): \"\"\" FastAPIKeycloak constructor Args: server_url (str): The URL of the Keycloak server, with `/auth` suffix client_id (str): The id of the client used for users client_secret (str): The client secret realm (str): The realm (name) admin_client_secret (str): Secret for the `admin-cli` client callback_uri (str): Callback URL of the instance, used for auth flows. Must match at least one `Valid Redirect URIs` of Keycloak app (FastAPI): Optional FastAPI app to add the config to swagger \"\"\" self . server_url = server_url self . realm = realm self . client_id = client_id self . client_secret = client_secret self . admin_client_secret = admin_client_secret self . callback_uri = callback_uri self . config ( app ) self . _get_admin_token ()","title":"__init__()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.config","text":"Parameters: Name Type Description Default app FastAPI Optional FastAPI app to add the config to swagger required Returns: Type Description None Inplace method Source code in fastapi_keycloak/api.py def config ( self , app : FastAPI ): \"\"\" Args: app (FastAPI): Optional FastAPI app to add the config to swagger Returns: None: Inplace method \"\"\" if app : app . swagger_ui_init_oauth = { \"usePkceWithAuthorizationCodeGrant\" : True , \"clientId\" : self . client_id , \"clientSecret\" : self . client_secret }","title":"config()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.create_role","text":"Create a role on the realm Parameters: Name Type Description Default role_name str Name of the new role required Returns: Type Description KeycloakRole If creation succeeded, else it will return the error Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole ) def create_role ( self , role_name : str ) -> KeycloakRole : \"\"\" Create a role on the realm Args: role_name (str): Name of the new role Returns: KeycloakRole: If creation succeeded, else it will return the error \"\"\" response = self . _admin_request ( url = self . roles_uri , data = { 'name' : role_name }, method = HTTPMethod . POST ) if response . status_code == 201 : return self . get_roles ( role_names = [ role_name ])[ 0 ] else : return response","title":"create_role()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.create_user","text":"Parameters: Name Type Description Default first_name str The first name of the new user required last_name str The last name of the new user required username str The username of the new user required email str The email of the new user required password str The password of the new user required enabled bool True if the user should be able to be used True initial_roles List[str] The roles the user should posses None Returns: Type Description KeycloakUser If the creation succeeded Notes Also triggers the email verification email Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser ) def create_user ( self , first_name : str , last_name : str , username : str , email : str , password : str , enabled : bool = True , initial_roles : List [ str ] = None ) -> KeycloakUser : \"\"\" Args: first_name (str): The first name of the new user last_name (str): The last name of the new user username (str): The username of the new user email (str): The email of the new user password (str): The password of the new user enabled (bool): True if the user should be able to be used initial_roles List[str]: The roles the user should posses Returns: KeycloakUser: If the creation succeeded Notes: - Also triggers the email verification email \"\"\" data = { \"email\" : email , \"username\" : username , \"firstName\" : first_name , \"lastName\" : last_name , \"enabled\" : enabled , \"clientRoles\" : self . get_roles ( initial_roles ), \"credentials\" : [ { \"temporary\" : False , \"type\" : \"password\" , \"value\" : password } ], \"requiredActions\" : [ \"VERIFY_EMAIL\" ] } response = self . _admin_request ( url = self . users_uri , data = data , method = HTTPMethod . POST ) if response . status_code == 201 : user = self . get_user ( query = f 'username= { username } ' ) self . send_email_verification ( user . id ) return user else : return response","title":"create_user()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.exchange_authorization_code","text":"Models the authorization code OAuth2 flow. Opening the URL provided by login_uri will result in a callback to the configured callback URL. The callback will also create a session_state and code query parameter that can be exchanged for an access token. Parameters: Name Type Description Default session_state str Salt to reduce the risk of successful attacks required code str The authorization code required Returns: Type Description KeycloakToken If the exchange succeeds Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakToken ) def exchange_authorization_code ( self , session_state : str , code : str ) -> KeycloakToken : \"\"\" Models the authorization code OAuth2 flow. Opening the URL provided by `login_uri` will result in a callback to the configured callback URL. The callback will also create a session_state and code query parameter that can be exchanged for an access token. Args: session_state (str): Salt to reduce the risk of successful attacks code (str): The authorization code Returns: KeycloakToken: If the exchange succeeds \"\"\" headers = { \"Content-Type\" : \"application/x-www-form-urlencoded\" } data = { \"client_id\" : self . client_id , \"client_secret\" : self . client_secret , \"code\" : code , \"session_state\" : session_state , \"grant_type\" : \"authorization_code\" , \"redirect_uri\" : self . callback_uri } response = requests . post ( url = self . token_uri , headers = headers , data = data ) return response","title":"exchange_authorization_code()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.get_all_roles","text":"Get all roles of the Keycloak realm Returns: Type Description List[KeycloakRole] All roles of the realm Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_all_roles ( self ) -> List [ KeycloakRole ]: \"\"\" Get all roles of the Keycloak realm Returns: List[KeycloakRole]: All roles of the realm \"\"\" return self . _admin_request ( url = self . roles_uri , method = HTTPMethod . GET )","title":"get_all_roles()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.get_all_users","text":"Returns all users of the realm Returns: Type Description List[KeycloakUser] All Keycloak users of the realm Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser , is_list = True ) def get_all_users ( self ) -> List [ KeycloakUser ]: \"\"\" Returns all users of the realm Returns: List[KeycloakUser]: All Keycloak users of the realm \"\"\" response = self . _admin_request ( url = self . users_uri , method = HTTPMethod . GET ) return response","title":"get_all_users()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.get_current_user","text":"Returns the current user based on an access token in the HTTP-header. Optionally verifies roles are possessed by the user Parameters: Name Type Description Default required_roles List[str] List of role names required for this endpoint None Returns: Type Description OIDCUser Decoded JWT content Source code in fastapi_keycloak/api.py def get_current_user ( self , required_roles : List [ str ] = None ) -> OIDCUser : \"\"\" Returns the current user based on an access token in the HTTP-header. Optionally verifies roles are possessed by the user Args: required_roles List[str]: List of role names required for this endpoint Returns: OIDCUser: Decoded JWT content \"\"\" def current_user ( token : OAuth2PasswordBearer = Depends ( self . user_auth_scheme )) -> OIDCUser : \"\"\" Decodes and verifies a JWT to get the current user Args: token OAuth2PasswordBearer: Access token in `Authorization` HTTP-header Returns: OIDCUser: Decoded JWT content \"\"\" options = { \"verify_signature\" : True , \"verify_aud\" : True , \"verify_exp\" : True } decoded_token : dict = jwt . decode ( token , self . public_key , options = options , audience = \"account\" ) user = OIDCUser . parse_obj ( decoded_token ) if required_roles : for role in required_roles : if role not in user . roles : raise HTTPException ( status_code = 403 , detail = f 'Role \" { role } \" is required to perform this action' ) return user return current_user","title":"get_current_user()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.get_identity_providers","text":"Returns all configured identity Providers Returns: Type Description List[KeycloakIdentityProvider] All configured identity providers Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakIdentityProvider , is_list = True ) def get_identity_providers ( self ) -> List [ KeycloakIdentityProvider ]: \"\"\" Returns all configured identity Providers Returns: List[KeycloakIdentityProvider]: All configured identity providers \"\"\" return self . _admin_request ( url = self . providers_uri , method = HTTPMethod . GET ) . json ()","title":"get_identity_providers()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.get_roles","text":"Returns full entries of Roles based on role names Parameters: Name Type Description Default role_names List[str] Roles that should be looked up (names) required Returns: Type Description List[KeycloakRole] Full entries stored at Keycloak. Notes The Keycloak RestAPI will only identify RoleRepresentations that use name AND id which is the only reason for existence of this function Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_roles ( self , role_names : List [ str ]) -> List [ KeycloakRole ]: \"\"\" Returns full entries of Roles based on role names Args: role_names List[str]: Roles that should be looked up (names) Returns: List[KeycloakRole]: Full entries stored at Keycloak. Notes: - The Keycloak RestAPI will only identify RoleRepresentations that use name AND id which is the only reason for existence of this function \"\"\" roles = self . get_all_roles () return list ( filter ( lambda role : role . name in role_names , roles ))","title":"get_roles()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.get_user","text":"Queries the keycloak API for a specific user either based on its ID or any native attribute Parameters: Name Type Description Default user_id str The user ID of interest None query str Query string. e.g. email=testuser@codespecialist.com or username=codespecialist '' Returns: Type Description KeycloakUser If the user was found Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser ) def get_user ( self , user_id : str = None , query : str = \"\" ) -> KeycloakUser : \"\"\" Queries the keycloak API for a specific user either based on its ID or any **native** attribute Args: user_id (str): The user ID of interest query: Query string. e.g. `email=testuser@codespecialist.com` or `username=codespecialist` Returns: KeycloakUser: If the user was found \"\"\" if user_id is None : response = self . _admin_request ( url = f ' { self . users_uri } ? { query } ' , method = HTTPMethod . GET ) return KeycloakUser ( ** response . json ()[ 0 ]) else : response = self . _admin_request ( url = f ' { self . users_uri } / { user_id } ' , method = HTTPMethod . GET ) return KeycloakUser ( ** response . json ())","title":"get_user()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.get_user_roles","text":"Gets all roles of an user Parameters: Name Type Description Default user_id str ID of the user of interest required Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_user_roles ( self , user_id : str ) -> List [ KeycloakRole ]: \"\"\" Gets all roles of an user Args: user_id (str): ID of the user of interest Returns: \"\"\" return self . _admin_request ( url = f ' { self . users_uri } / { user_id } /role-mappings/realm' , method = HTTPMethod . GET )","title":"get_user_roles()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.token_is_valid","text":"Validates an access token, optionally also its audience Parameters: Name Type Description Default token str The token to be verified required audience str Optional audience. Will be checked if provided None Returns: Type Description bool True if the token is valid Source code in fastapi_keycloak/api.py def token_is_valid ( self , token : str , audience : str = None ) -> bool : \"\"\" Validates an access token, optionally also its audience Args: token (str): The token to be verified audience (str): Optional audience. Will be checked if provided Returns: bool: True if the token is valid \"\"\" try : options = { \"verify_signature\" : True , \"verify_aud\" : audience is not None , \"verify_exp\" : True } jwt . decode ( token , self . public_key , options = options , audience = audience ) return True except ( ExpiredSignatureError , JWTError ): return False","title":"token_is_valid()"},{"location":"reference/#fastapi_keycloak.api.FastAPIKeycloak.user_login","text":"Models the password OAuth2 flow. Exchanges username and password for an access token. Parameters: Name Type Description Default username str Username used for login required password str Password of the user required Returns: Type Description KeycloakToken If the exchange succeeds Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakToken ) def user_login ( self , username : str , password : str ) -> KeycloakToken : \"\"\" Models the password OAuth2 flow. Exchanges username and password for an access token. Args: username (str): Username used for login password (str): Password of the user Returns: KeycloakToken: If the exchange succeeds \"\"\" headers = { \"Content-Type\" : \"application/x-www-form-urlencoded\" } data = { \"client_id\" : self . client_id , \"client_secret\" : self . client_secret , \"username\" : username , \"password\" : password , \"grant_type\" : \"password\" } response = requests . post ( url = self . token_uri , headers = headers , data = data ) return response","title":"user_login()"}]}