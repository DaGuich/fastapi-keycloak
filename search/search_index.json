{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI Keycloak Integration Documentation Introduction Welcome to fastapi-keycloak . This projects goal is to ease the integration of Keycloak (OpenID Connect) with Python, especially FastAPI. FastAPI is not necessary but is encouraged due to specific features. Currently, this package supports only the password flow . However, the get_current_user() method accepts any JWT that was signed using Keycloak's private key. Caution This package is currently under development and is not yet officially released. However, you may still use it and contribute to it. TLDR; FastAPI Keycloak enables you to do the following things without writing a single line of additional code: Verify identities and roles of users with Keycloak Get a list of available identity providers Create/read/delete users Create/read/delete roles Assign/remove roles from users Implement the password flow (login/callback/logout) Example This example assumes you use a frontend technology (such as React, Vue, or whatever suits you) to render your pages and merely depicts a protected backend app.py import uvicorn from fastapi import FastAPI , Depends from fastapi_keycloak import FastAPIKeycloak , OIDCUser app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) @app . get ( \"/premium\" , tags = [ \"secured-endpoint\" ]) def premium ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"premium\" ]))): return f 'Hi premium user { user } ' @app . get ( \"/user/roles\" , tags = [ \"secured-endpoint\" ]) def user_roles ( user : OIDCUser = Depends ( idp . get_current_user )): return f ' { user . roles } ' if __name__ == '__main__' : uvicorn . run ( 'app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"Introduction"},{"location":"#fastapi-keycloak-integration","text":"Documentation","title":"FastAPI Keycloak Integration"},{"location":"#introduction","text":"Welcome to fastapi-keycloak . This projects goal is to ease the integration of Keycloak (OpenID Connect) with Python, especially FastAPI. FastAPI is not necessary but is encouraged due to specific features. Currently, this package supports only the password flow . However, the get_current_user() method accepts any JWT that was signed using Keycloak's private key. Caution This package is currently under development and is not yet officially released. However, you may still use it and contribute to it.","title":"Introduction"},{"location":"#tldr","text":"FastAPI Keycloak enables you to do the following things without writing a single line of additional code: Verify identities and roles of users with Keycloak Get a list of available identity providers Create/read/delete users Create/read/delete roles Assign/remove roles from users Implement the password flow (login/callback/logout)","title":"TLDR;"},{"location":"#example","text":"This example assumes you use a frontend technology (such as React, Vue, or whatever suits you) to render your pages and merely depicts a protected backend","title":"Example"},{"location":"#apppy","text":"import uvicorn from fastapi import FastAPI , Depends from fastapi_keycloak import FastAPIKeycloak , OIDCUser app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) @app . get ( \"/premium\" , tags = [ \"secured-endpoint\" ]) def premium ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"premium\" ]))): return f 'Hi premium user { user } ' @app . get ( \"/user/roles\" , tags = [ \"secured-endpoint\" ]) def user_roles ( user : OIDCUser = Depends ( idp . get_current_user )): return f ' { user . roles } ' if __name__ == '__main__' : uvicorn . run ( 'app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"app.py"},{"location":"docs/","text":"FastAPI Keycloak Integration Welcome to fastapi-keycloak . This projects goal is to ease the integration of Keycloak (OpenID Connect) with Python, especially FastAPI. FastAPI is not necessary but is encouraged due to specific features. Currently, this package supports only the password flow . However, the get_current_user() method accepts any JWT that was signed using Keycloak's private key. TLDR; FastAPI Keycloak enables you to do the following things without writing a single line of additional code: Verify identities and roles of users with Keycloak Get a list of available identity providers Create/read/delete users Create/read/delete roles Assign/Remove roles from users Implement the password flow (login/callback/logout) Example app.py import uvicorn from fastapi import FastAPI , Depends from fastapi_keycloak import FastAPIKeycloak , OIDCUser app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) @app . get ( \"/premium\" ) def premium ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"premium\" ]))): return f 'Hi premium user { user } ' @app . get ( \"/user/roles\" ) def user_roles ( user : OIDCUser = Depends ( idp . get_current_user )): return f ' { user . roles } ' if __name__ == '__main__' : uvicorn . run ( 'app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"FastAPI Keycloak Integration"},{"location":"docs/#fastapi-keycloak-integration","text":"Welcome to fastapi-keycloak . This projects goal is to ease the integration of Keycloak (OpenID Connect) with Python, especially FastAPI. FastAPI is not necessary but is encouraged due to specific features. Currently, this package supports only the password flow . However, the get_current_user() method accepts any JWT that was signed using Keycloak's private key.","title":"FastAPI Keycloak Integration"},{"location":"docs/#tldr","text":"FastAPI Keycloak enables you to do the following things without writing a single line of additional code: Verify identities and roles of users with Keycloak Get a list of available identity providers Create/read/delete users Create/read/delete roles Assign/Remove roles from users Implement the password flow (login/callback/logout)","title":"TLDR;"},{"location":"docs/#example","text":"","title":"Example"},{"location":"docs/#apppy","text":"import uvicorn from fastapi import FastAPI , Depends from fastapi_keycloak import FastAPIKeycloak , OIDCUser app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) @app . get ( \"/premium\" ) def premium ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"premium\" ]))): return f 'Hi premium user { user } ' @app . get ( \"/user/roles\" ) def user_roles ( user : OIDCUser = Depends ( idp . get_current_user )): return f ' { user . roles } ' if __name__ == '__main__' : uvicorn . run ( 'app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"app.py"},{"location":"docs/installation/","text":"Installation pip install fastapi-keycloak Caution This package is currently under development and is not yet officially released. However, you may still use it and contribute to it.","title":"Installation"},{"location":"docs/installation/#installation","text":"pip install fastapi-keycloak Caution This package is currently under development and is not yet officially released. However, you may still use it and contribute to it.","title":"Installation"},{"location":"docs/quick-start/","text":"Example Usage from typing import List , Optional import uvicorn from fastapi import FastAPI , Depends , Query , Body from pydantic import SecretStr from fastapi_keycloak import FastAPIKeycloak , OIDCUser , UsernamePassword , HTTPMethod app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) # Admin @app . post ( \"/proxy\" , tags = [ \"admin-cli\" ]) def proxy_admin_request ( relative_path : str , method : HTTPMethod , additional_headers : dict = Body ( None ), payload : dict = Body ( None )): return idp . proxy ( additional_headers = additional_headers , relative_path = relative_path , method = method , payload = payload ) @app . get ( \"/identity-providers\" , tags = [ \"admin-cli\" ]) def get_identity_providers (): return idp . get_identity_providers () @app . get ( \"/idp-configuration\" , tags = [ \"admin-cli\" ]) def get_idp_config (): return idp . open_id_configuration # User Management @app . get ( \"/users\" , tags = [ \"user-management\" ]) def get_users (): return idp . get_all_users () @app . get ( \"/user\" , tags = [ \"user-management\" ]) def get_user_by_query ( query : str = None ): return idp . get_user ( query = query ) @app . post ( \"/users\" , tags = [ \"user-management\" ]) def create_user ( first_name : str , last_name : str , email : str , password : SecretStr , id : str = None ): return idp . create_user ( first_name = first_name , last_name = last_name , username = email , email = email , password = password . get_secret_value (), id = id ) @app . get ( \"/user/ {user_id} \" , tags = [ \"user-management\" ]) def get_user ( user_id : str = None ): return idp . get_user ( user_id = user_id ) @app . delete ( \"/user/ {user_id} \" , tags = [ \"user-management\" ]) def delete_user ( user_id : str ): return idp . delete_user ( user_id = user_id ) @app . put ( \"/user/ {user_id} /change-password\" , tags = [ \"user-management\" ]) def change_password ( user_id : str , new_password : SecretStr ): return idp . change_password ( user_id = user_id , new_password = new_password ) @app . put ( \"/user/ {user_id} /send-email-verification\" , tags = [ \"user-management\" ]) def send_email_verification ( user_id : str ): return idp . send_email_verification ( user_id = user_id ) # Role Management @app . get ( \"/roles\" , tags = [ \"role-management\" ]) def get_all_roles (): return idp . get_all_roles () @app . get ( \"/role/ {role_name} \" , tags = [ \"role-management\" ]) def get_role ( role_name : str ): return idp . get_roles ([ role_name ]) @app . post ( \"/roles\" , tags = [ \"role-management\" ]) def add_role ( role_name : str ): return idp . create_role ( role_name = role_name ) @app . delete ( \"/roles\" , tags = [ \"role-management\" ]) def delete_roles ( role_name : str ): return idp . delete_role ( role_name = role_name ) # User Roles @app . post ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def add_roles_to_user ( user_id : str , roles : Optional [ List [ str ]] = Query ( None )): return idp . add_user_roles ( user_id = user_id , roles = roles ) @app . get ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def get_user_roles ( user_id : str ): return idp . get_user_roles ( user_id = user_id ) @app . get ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def get_user_roles ( user_id : str ): return idp . get_user_roles ( user_id = user_id ) @app . delete ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def delete_roles_from_user ( user_id : str , roles : Optional [ List [ str ]] = Query ( None )): return idp . remove_user_roles ( user_id = user_id , roles = roles ) # User Requests @app . get ( \"/protected\" , tags = [ \"example-user-request\" ]) def protected ( user : OIDCUser = Depends ( idp . get_current_user ())): return user @app . get ( \"/current_user/roles\" , tags = [ \"example-user-request\" ]) def get_current_users_roles ( user : OIDCUser = Depends ( idp . get_current_user ())): return user . roles @app . get ( \"/company/edit\" , tags = [ \"example-user-request\" ]) def company_admin ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"company_admin\" ]))): return f 'Hi company admin { user } ' @app . get ( \"/login\" , tags = [ \"example-user-request\" ]) def login ( user : UsernamePassword = Depends ()): return idp . user_login ( username = user . username , password = user . password . get_secret_value ()) # Auth Flow @app . get ( \"/login-link\" , tags = [ \"auth-flow\" ]) def login_redirect (): return idp . login_uri @app . get ( \"/callback\" , tags = [ \"auth-flow\" ]) def callback ( session_state : str , code : str ): return idp . exchange_authorization_code ( session_state = session_state , code = code ) @app . get ( \"/logout\" , tags = [ \"auth-flow\" ]) def logout (): return idp . logout_uri if __name__ == '__main__' : uvicorn . run ( 'example_app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"Quick Start"},{"location":"docs/quick-start/#example-usage","text":"from typing import List , Optional import uvicorn from fastapi import FastAPI , Depends , Query , Body from pydantic import SecretStr from fastapi_keycloak import FastAPIKeycloak , OIDCUser , UsernamePassword , HTTPMethod app = FastAPI () idp = FastAPIKeycloak ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-client\" , client_secret = \"some-client-secret\" , admin_client_secret = \"admin-cli-secret\" , realm = \"some-realm-name\" , callback_uri = \"http://localhost:8081/callback\" ) # Admin @app . post ( \"/proxy\" , tags = [ \"admin-cli\" ]) def proxy_admin_request ( relative_path : str , method : HTTPMethod , additional_headers : dict = Body ( None ), payload : dict = Body ( None )): return idp . proxy ( additional_headers = additional_headers , relative_path = relative_path , method = method , payload = payload ) @app . get ( \"/identity-providers\" , tags = [ \"admin-cli\" ]) def get_identity_providers (): return idp . get_identity_providers () @app . get ( \"/idp-configuration\" , tags = [ \"admin-cli\" ]) def get_idp_config (): return idp . open_id_configuration # User Management @app . get ( \"/users\" , tags = [ \"user-management\" ]) def get_users (): return idp . get_all_users () @app . get ( \"/user\" , tags = [ \"user-management\" ]) def get_user_by_query ( query : str = None ): return idp . get_user ( query = query ) @app . post ( \"/users\" , tags = [ \"user-management\" ]) def create_user ( first_name : str , last_name : str , email : str , password : SecretStr , id : str = None ): return idp . create_user ( first_name = first_name , last_name = last_name , username = email , email = email , password = password . get_secret_value (), id = id ) @app . get ( \"/user/ {user_id} \" , tags = [ \"user-management\" ]) def get_user ( user_id : str = None ): return idp . get_user ( user_id = user_id ) @app . delete ( \"/user/ {user_id} \" , tags = [ \"user-management\" ]) def delete_user ( user_id : str ): return idp . delete_user ( user_id = user_id ) @app . put ( \"/user/ {user_id} /change-password\" , tags = [ \"user-management\" ]) def change_password ( user_id : str , new_password : SecretStr ): return idp . change_password ( user_id = user_id , new_password = new_password ) @app . put ( \"/user/ {user_id} /send-email-verification\" , tags = [ \"user-management\" ]) def send_email_verification ( user_id : str ): return idp . send_email_verification ( user_id = user_id ) # Role Management @app . get ( \"/roles\" , tags = [ \"role-management\" ]) def get_all_roles (): return idp . get_all_roles () @app . get ( \"/role/ {role_name} \" , tags = [ \"role-management\" ]) def get_role ( role_name : str ): return idp . get_roles ([ role_name ]) @app . post ( \"/roles\" , tags = [ \"role-management\" ]) def add_role ( role_name : str ): return idp . create_role ( role_name = role_name ) @app . delete ( \"/roles\" , tags = [ \"role-management\" ]) def delete_roles ( role_name : str ): return idp . delete_role ( role_name = role_name ) # User Roles @app . post ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def add_roles_to_user ( user_id : str , roles : Optional [ List [ str ]] = Query ( None )): return idp . add_user_roles ( user_id = user_id , roles = roles ) @app . get ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def get_user_roles ( user_id : str ): return idp . get_user_roles ( user_id = user_id ) @app . get ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def get_user_roles ( user_id : str ): return idp . get_user_roles ( user_id = user_id ) @app . delete ( \"/users/ {user_id} /roles\" , tags = [ \"user-roles\" ]) def delete_roles_from_user ( user_id : str , roles : Optional [ List [ str ]] = Query ( None )): return idp . remove_user_roles ( user_id = user_id , roles = roles ) # User Requests @app . get ( \"/protected\" , tags = [ \"example-user-request\" ]) def protected ( user : OIDCUser = Depends ( idp . get_current_user ())): return user @app . get ( \"/current_user/roles\" , tags = [ \"example-user-request\" ]) def get_current_users_roles ( user : OIDCUser = Depends ( idp . get_current_user ())): return user . roles @app . get ( \"/company/edit\" , tags = [ \"example-user-request\" ]) def company_admin ( user : OIDCUser = Depends ( idp . get_current_user ( required_roles = [ \"company_admin\" ]))): return f 'Hi company admin { user } ' @app . get ( \"/login\" , tags = [ \"example-user-request\" ]) def login ( user : UsernamePassword = Depends ()): return idp . user_login ( username = user . username , password = user . password . get_secret_value ()) # Auth Flow @app . get ( \"/login-link\" , tags = [ \"auth-flow\" ]) def login_redirect (): return idp . login_uri @app . get ( \"/callback\" , tags = [ \"auth-flow\" ]) def callback ( session_state : str , code : str ): return idp . exchange_authorization_code ( session_state = session_state , code = code ) @app . get ( \"/logout\" , tags = [ \"auth-flow\" ]) def logout (): return idp . logout_uri if __name__ == '__main__' : uvicorn . run ( 'example_app:app' , host = \"127.0.0.1\" , port = 8081 )","title":"Example Usage"},{"location":"docs/reference/","text":"Instance to wrap the Keycloak API with FastAPI Examples: app = FastAPI () idp = KeycloakFastAPI ( app = app , server_url = \"https://auth.some-domain.com/auth\" , client_id = \"some-test-client\" , client_secret = \"some-secret\" , admin_client_secret = \"some-admin-cli-secret\" , realm = \"Test\" , callback_uri = f \"http://localhost:8081/callback\" ) admin_token : KeycloakToken property readonly Requests an AccessToken on the admin-cli client Returns: Type Description KeycloakToken A token, valid to perform admin actions open_id_configuration : dict cached property writable Returns Keycloaks Open ID Connect configuration Returns: Type Description dict Open ID Configuration public_key : str cached property writable Returns the Keycloak public key Returns: Type Description str Public key for JWT decoding user_auth_scheme : OAuth2PasswordBearer cached property writable Returns the auth scheme to register the endpoints with swagger Returns: Type Description OAuth2PasswordBearer Auth scheme for swagger __init__ ( self , server_url , client_id , client_secret , realm , admin_client_secret , callback_uri , app = None ) special FastAPIKeycloak constructor Parameters: Name Type Description Default server_url str The URL of the Keycloak server, with /auth suffix required client_id str The id of the client used for users required client_secret str The client secret required realm str The realm (name) required admin_client_secret str Secret for the admin-cli client required callback_uri str Callback URL of the instance, used for auth flows. Must match at least one Valid Redirect URIs of Keycloak required app FastAPI Optional FastAPI app to add the config to swagger None Source code in fastapi_keycloak/api.py def __init__ ( self , server_url : str , client_id : str , client_secret : str , realm : str , admin_client_secret : str , callback_uri : str , app : FastAPI = None ): \"\"\" FastAPIKeycloak constructor Args: server_url (str): The URL of the Keycloak server, with `/auth` suffix client_id (str): The id of the client used for users client_secret (str): The client secret realm (str): The realm (name) admin_client_secret (str): Secret for the `admin-cli` client callback_uri (str): Callback URL of the instance, used for auth flows. Must match at least one `Valid Redirect URIs` of Keycloak app (FastAPI): Optional FastAPI app to add the config to swagger \"\"\" self . server_url = server_url self . realm = realm self . client_id = client_id self . client_secret = client_secret self . admin_client_secret = admin_client_secret self . callback_uri = callback_uri self . config ( app ) self . _get_admin_token () config ( self , app ) Parameters: Name Type Description Default app FastAPI Optional FastAPI app to add the config to swagger required Returns: Type Description None Inplace method Source code in fastapi_keycloak/api.py def config ( self , app : FastAPI ): \"\"\" Args: app (FastAPI): Optional FastAPI app to add the config to swagger Returns: None: Inplace method \"\"\" if app : app . swagger_ui_init_oauth = { \"usePkceWithAuthorizationCodeGrant\" : True , \"clientId\" : self . client_id , \"clientSecret\" : self . client_secret } create_role ( self , role_name ) Create a role on the realm Parameters: Name Type Description Default role_name str Name of the new role required Returns: Type Description KeycloakRole If creation succeeded, else it will return the error Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole ) def create_role ( self , role_name : str ) -> KeycloakRole : \"\"\" Create a role on the realm Args: role_name (str): Name of the new role Returns: KeycloakRole: If creation succeeded, else it will return the error \"\"\" response = self . _admin_request ( url = self . roles_uri , data = { 'name' : role_name }, method = HTTPMethod . POST ) if response . status_code == 201 : return self . get_roles ( role_names = [ role_name ])[ 0 ] else : return response create_user ( self , first_name , last_name , username , email , password , enabled = True , initial_roles = None ) Parameters: Name Type Description Default first_name str The first name of the new user required last_name str The last name of the new user required username str The username of the new user required email str The email of the new user required password str The password of the new user required enabled bool True if the user should be able to be used True initial_roles List[str] The roles the user should posses None Returns: Type Description KeycloakUser If the creation succeeded Notes Also triggers the email verification email Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser ) def create_user ( self , first_name : str , last_name : str , username : str , email : str , password : str , enabled : bool = True , initial_roles : List [ str ] = None ) -> KeycloakUser : \"\"\" Args: first_name (str): The first name of the new user last_name (str): The last name of the new user username (str): The username of the new user email (str): The email of the new user password (str): The password of the new user enabled (bool): True if the user should be able to be used initial_roles List[str]: The roles the user should posses Returns: KeycloakUser: If the creation succeeded Notes: - Also triggers the email verification email \"\"\" data = { \"email\" : email , \"username\" : username , \"firstName\" : first_name , \"lastName\" : last_name , \"enabled\" : enabled , \"clientRoles\" : self . get_roles ( initial_roles ), \"credentials\" : [ { \"temporary\" : False , \"type\" : \"password\" , \"value\" : password } ], \"requiredActions\" : [ \"VERIFY_EMAIL\" ] } response = self . _admin_request ( url = self . users_uri , data = data , method = HTTPMethod . POST ) if response . status_code == 201 : user = self . get_user ( query = f 'username= { username } ' ) self . send_email_verification ( user . id ) return user else : return response exchange_authorization_code ( self , session_state , code ) Models the authorization code OAuth2 flow. Opening the URL provided by login_uri will result in a callback to the configured callback URL. The callback will also create a session_state and code query parameter that can be exchanged for an access token. Parameters: Name Type Description Default session_state str Salt to reduce the risk of successful attacks required code str The authorization code required Returns: Type Description KeycloakToken If the exchange succeeds Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakToken ) def exchange_authorization_code ( self , session_state : str , code : str ) -> KeycloakToken : \"\"\" Models the authorization code OAuth2 flow. Opening the URL provided by `login_uri` will result in a callback to the configured callback URL. The callback will also create a session_state and code query parameter that can be exchanged for an access token. Args: session_state (str): Salt to reduce the risk of successful attacks code (str): The authorization code Returns: KeycloakToken: If the exchange succeeds \"\"\" headers = { \"Content-Type\" : \"application/x-www-form-urlencoded\" } data = { \"client_id\" : self . client_id , \"client_secret\" : self . client_secret , \"code\" : code , \"session_state\" : session_state , \"grant_type\" : \"authorization_code\" , \"redirect_uri\" : self . callback_uri } response = requests . post ( url = self . token_uri , headers = headers , data = data ) return response get_all_roles ( self ) Get all roles of the Keycloak realm Returns: Type Description List[KeycloakRole] All roles of the realm Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_all_roles ( self ) -> List [ KeycloakRole ]: \"\"\" Get all roles of the Keycloak realm Returns: List[KeycloakRole]: All roles of the realm \"\"\" return self . _admin_request ( url = self . roles_uri , method = HTTPMethod . GET ) get_all_users ( self ) Returns all users of the realm Returns: Type Description List[KeycloakUser] All Keycloak users of the realm Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser , is_list = True ) def get_all_users ( self ) -> List [ KeycloakUser ]: \"\"\" Returns all users of the realm Returns: List[KeycloakUser]: All Keycloak users of the realm \"\"\" response = self . _admin_request ( url = self . users_uri , method = HTTPMethod . GET ) return response get_current_user ( self , required_roles = None ) Returns the current user based on an access token in the HTTP-header. Optionally verifies roles are possessed by the user Parameters: Name Type Description Default required_roles List[str] List of role names required for this endpoint None Returns: Type Description OIDCUser Decoded JWT content Source code in fastapi_keycloak/api.py def get_current_user ( self , required_roles : List [ str ] = None ) -> OIDCUser : \"\"\" Returns the current user based on an access token in the HTTP-header. Optionally verifies roles are possessed by the user Args: required_roles List[str]: List of role names required for this endpoint Returns: OIDCUser: Decoded JWT content \"\"\" def current_user ( token : OAuth2PasswordBearer = Depends ( self . user_auth_scheme )) -> OIDCUser : \"\"\" Decodes and verifies a JWT to get the current user Args: token OAuth2PasswordBearer: Access token in `Authorization` HTTP-header Returns: OIDCUser: Decoded JWT content \"\"\" options = { \"verify_signature\" : True , \"verify_aud\" : True , \"verify_exp\" : True } decoded_token : dict = jwt . decode ( token , self . public_key , options = options , audience = \"account\" ) user = OIDCUser . parse_obj ( decoded_token ) if required_roles : for role in required_roles : if role not in user . roles : raise HTTPException ( status_code = 403 , detail = f 'Role \" { role } \" is required to perform this action' ) return user return current_user get_identity_providers ( self ) Returns all configured identity Providers Returns: Type Description List[KeycloakIdentityProvider] All configured identity providers Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakIdentityProvider , is_list = True ) def get_identity_providers ( self ) -> List [ KeycloakIdentityProvider ]: \"\"\" Returns all configured identity Providers Returns: List[KeycloakIdentityProvider]: All configured identity providers \"\"\" return self . _admin_request ( url = self . providers_uri , method = HTTPMethod . GET ) . json () get_roles ( self , role_names ) Returns full entries of Roles based on role names Parameters: Name Type Description Default role_names List[str] Roles that should be looked up (names) required Returns: Type Description List[KeycloakRole] Full entries stored at Keycloak. Notes The Keycloak RestAPI will only identify RoleRepresentations that use name AND id which is the only reason for existence of this function Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_roles ( self , role_names : List [ str ]) -> List [ KeycloakRole ]: \"\"\" Returns full entries of Roles based on role names Args: role_names List[str]: Roles that should be looked up (names) Returns: List[KeycloakRole]: Full entries stored at Keycloak. Notes: - The Keycloak RestAPI will only identify RoleRepresentations that use name AND id which is the only reason for existence of this function \"\"\" roles = self . get_all_roles () return list ( filter ( lambda role : role . name in role_names , roles )) get_user ( self , user_id = None , query = '' ) Queries the keycloak API for a specific user either based on its ID or any native attribute Parameters: Name Type Description Default user_id str The user ID of interest None query str Query string. e.g. email=testuser@codespecialist.com or username=codespecialist '' Returns: Type Description KeycloakUser If the user was found Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser ) def get_user ( self , user_id : str = None , query : str = \"\" ) -> KeycloakUser : \"\"\" Queries the keycloak API for a specific user either based on its ID or any **native** attribute Args: user_id (str): The user ID of interest query: Query string. e.g. `email=testuser@codespecialist.com` or `username=codespecialist` Returns: KeycloakUser: If the user was found \"\"\" if user_id is None : response = self . _admin_request ( url = f ' { self . users_uri } ? { query } ' , method = HTTPMethod . GET ) return KeycloakUser ( ** response . json ()[ 0 ]) else : response = self . _admin_request ( url = f ' { self . users_uri } / { user_id } ' , method = HTTPMethod . GET ) return KeycloakUser ( ** response . json ()) get_user_roles ( self , user_id ) Gets all roles of an user Parameters: Name Type Description Default user_id str ID of the user of interest required Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_user_roles ( self , user_id : str ) -> List [ KeycloakRole ]: \"\"\" Gets all roles of an user Args: user_id (str): ID of the user of interest Returns: \"\"\" return self . _admin_request ( url = f ' { self . users_uri } / { user_id } /role-mappings/realm' , method = HTTPMethod . GET ) token_is_valid ( self , token , audience = None ) Validates an access token, optionally also its audience Parameters: Name Type Description Default token str The token to be verified required audience str Optional audience. Will be checked if provided None Returns: Type Description bool True if the token is valid Source code in fastapi_keycloak/api.py def token_is_valid ( self , token : str , audience : str = None ) -> bool : \"\"\" Validates an access token, optionally also its audience Args: token (str): The token to be verified audience (str): Optional audience. Will be checked if provided Returns: bool: True if the token is valid \"\"\" try : options = { \"verify_signature\" : True , \"verify_aud\" : audience is not None , \"verify_exp\" : True } jwt . decode ( token , self . public_key , options = options , audience = audience ) return True except ( ExpiredSignatureError , JWTError ): return False user_login ( self , username , password ) Models the password OAuth2 flow. Exchanges username and password for an access token. Parameters: Name Type Description Default username str Username used for login required password str Password of the user required Returns: Type Description KeycloakToken If the exchange succeeds Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakToken ) def user_login ( self , username : str , password : str ) -> KeycloakToken : \"\"\" Models the password OAuth2 flow. Exchanges username and password for an access token. Args: username (str): Username used for login password (str): Password of the user Returns: KeycloakToken: If the exchange succeeds \"\"\" headers = { \"Content-Type\" : \"application/x-www-form-urlencoded\" } data = { \"client_id\" : self . client_id , \"client_secret\" : self . client_secret , \"username\" : username , \"password\" : password , \"grant_type\" : \"password\" } response = requests . post ( url = self . token_uri , headers = headers , data = data ) return response","title":"API Reference"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.admin_token","text":"Requests an AccessToken on the admin-cli client Returns: Type Description KeycloakToken A token, valid to perform admin actions","title":"admin_token"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.open_id_configuration","text":"Returns Keycloaks Open ID Connect configuration Returns: Type Description dict Open ID Configuration","title":"open_id_configuration"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.public_key","text":"Returns the Keycloak public key Returns: Type Description str Public key for JWT decoding","title":"public_key"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.user_auth_scheme","text":"Returns the auth scheme to register the endpoints with swagger Returns: Type Description OAuth2PasswordBearer Auth scheme for swagger","title":"user_auth_scheme"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.__init__","text":"FastAPIKeycloak constructor Parameters: Name Type Description Default server_url str The URL of the Keycloak server, with /auth suffix required client_id str The id of the client used for users required client_secret str The client secret required realm str The realm (name) required admin_client_secret str Secret for the admin-cli client required callback_uri str Callback URL of the instance, used for auth flows. Must match at least one Valid Redirect URIs of Keycloak required app FastAPI Optional FastAPI app to add the config to swagger None Source code in fastapi_keycloak/api.py def __init__ ( self , server_url : str , client_id : str , client_secret : str , realm : str , admin_client_secret : str , callback_uri : str , app : FastAPI = None ): \"\"\" FastAPIKeycloak constructor Args: server_url (str): The URL of the Keycloak server, with `/auth` suffix client_id (str): The id of the client used for users client_secret (str): The client secret realm (str): The realm (name) admin_client_secret (str): Secret for the `admin-cli` client callback_uri (str): Callback URL of the instance, used for auth flows. Must match at least one `Valid Redirect URIs` of Keycloak app (FastAPI): Optional FastAPI app to add the config to swagger \"\"\" self . server_url = server_url self . realm = realm self . client_id = client_id self . client_secret = client_secret self . admin_client_secret = admin_client_secret self . callback_uri = callback_uri self . config ( app ) self . _get_admin_token ()","title":"__init__()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.config","text":"Parameters: Name Type Description Default app FastAPI Optional FastAPI app to add the config to swagger required Returns: Type Description None Inplace method Source code in fastapi_keycloak/api.py def config ( self , app : FastAPI ): \"\"\" Args: app (FastAPI): Optional FastAPI app to add the config to swagger Returns: None: Inplace method \"\"\" if app : app . swagger_ui_init_oauth = { \"usePkceWithAuthorizationCodeGrant\" : True , \"clientId\" : self . client_id , \"clientSecret\" : self . client_secret }","title":"config()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.create_role","text":"Create a role on the realm Parameters: Name Type Description Default role_name str Name of the new role required Returns: Type Description KeycloakRole If creation succeeded, else it will return the error Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole ) def create_role ( self , role_name : str ) -> KeycloakRole : \"\"\" Create a role on the realm Args: role_name (str): Name of the new role Returns: KeycloakRole: If creation succeeded, else it will return the error \"\"\" response = self . _admin_request ( url = self . roles_uri , data = { 'name' : role_name }, method = HTTPMethod . POST ) if response . status_code == 201 : return self . get_roles ( role_names = [ role_name ])[ 0 ] else : return response","title":"create_role()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.create_user","text":"Parameters: Name Type Description Default first_name str The first name of the new user required last_name str The last name of the new user required username str The username of the new user required email str The email of the new user required password str The password of the new user required enabled bool True if the user should be able to be used True initial_roles List[str] The roles the user should posses None Returns: Type Description KeycloakUser If the creation succeeded Notes Also triggers the email verification email Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser ) def create_user ( self , first_name : str , last_name : str , username : str , email : str , password : str , enabled : bool = True , initial_roles : List [ str ] = None ) -> KeycloakUser : \"\"\" Args: first_name (str): The first name of the new user last_name (str): The last name of the new user username (str): The username of the new user email (str): The email of the new user password (str): The password of the new user enabled (bool): True if the user should be able to be used initial_roles List[str]: The roles the user should posses Returns: KeycloakUser: If the creation succeeded Notes: - Also triggers the email verification email \"\"\" data = { \"email\" : email , \"username\" : username , \"firstName\" : first_name , \"lastName\" : last_name , \"enabled\" : enabled , \"clientRoles\" : self . get_roles ( initial_roles ), \"credentials\" : [ { \"temporary\" : False , \"type\" : \"password\" , \"value\" : password } ], \"requiredActions\" : [ \"VERIFY_EMAIL\" ] } response = self . _admin_request ( url = self . users_uri , data = data , method = HTTPMethod . POST ) if response . status_code == 201 : user = self . get_user ( query = f 'username= { username } ' ) self . send_email_verification ( user . id ) return user else : return response","title":"create_user()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.exchange_authorization_code","text":"Models the authorization code OAuth2 flow. Opening the URL provided by login_uri will result in a callback to the configured callback URL. The callback will also create a session_state and code query parameter that can be exchanged for an access token. Parameters: Name Type Description Default session_state str Salt to reduce the risk of successful attacks required code str The authorization code required Returns: Type Description KeycloakToken If the exchange succeeds Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakToken ) def exchange_authorization_code ( self , session_state : str , code : str ) -> KeycloakToken : \"\"\" Models the authorization code OAuth2 flow. Opening the URL provided by `login_uri` will result in a callback to the configured callback URL. The callback will also create a session_state and code query parameter that can be exchanged for an access token. Args: session_state (str): Salt to reduce the risk of successful attacks code (str): The authorization code Returns: KeycloakToken: If the exchange succeeds \"\"\" headers = { \"Content-Type\" : \"application/x-www-form-urlencoded\" } data = { \"client_id\" : self . client_id , \"client_secret\" : self . client_secret , \"code\" : code , \"session_state\" : session_state , \"grant_type\" : \"authorization_code\" , \"redirect_uri\" : self . callback_uri } response = requests . post ( url = self . token_uri , headers = headers , data = data ) return response","title":"exchange_authorization_code()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.get_all_roles","text":"Get all roles of the Keycloak realm Returns: Type Description List[KeycloakRole] All roles of the realm Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_all_roles ( self ) -> List [ KeycloakRole ]: \"\"\" Get all roles of the Keycloak realm Returns: List[KeycloakRole]: All roles of the realm \"\"\" return self . _admin_request ( url = self . roles_uri , method = HTTPMethod . GET )","title":"get_all_roles()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.get_all_users","text":"Returns all users of the realm Returns: Type Description List[KeycloakUser] All Keycloak users of the realm Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser , is_list = True ) def get_all_users ( self ) -> List [ KeycloakUser ]: \"\"\" Returns all users of the realm Returns: List[KeycloakUser]: All Keycloak users of the realm \"\"\" response = self . _admin_request ( url = self . users_uri , method = HTTPMethod . GET ) return response","title":"get_all_users()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.get_current_user","text":"Returns the current user based on an access token in the HTTP-header. Optionally verifies roles are possessed by the user Parameters: Name Type Description Default required_roles List[str] List of role names required for this endpoint None Returns: Type Description OIDCUser Decoded JWT content Source code in fastapi_keycloak/api.py def get_current_user ( self , required_roles : List [ str ] = None ) -> OIDCUser : \"\"\" Returns the current user based on an access token in the HTTP-header. Optionally verifies roles are possessed by the user Args: required_roles List[str]: List of role names required for this endpoint Returns: OIDCUser: Decoded JWT content \"\"\" def current_user ( token : OAuth2PasswordBearer = Depends ( self . user_auth_scheme )) -> OIDCUser : \"\"\" Decodes and verifies a JWT to get the current user Args: token OAuth2PasswordBearer: Access token in `Authorization` HTTP-header Returns: OIDCUser: Decoded JWT content \"\"\" options = { \"verify_signature\" : True , \"verify_aud\" : True , \"verify_exp\" : True } decoded_token : dict = jwt . decode ( token , self . public_key , options = options , audience = \"account\" ) user = OIDCUser . parse_obj ( decoded_token ) if required_roles : for role in required_roles : if role not in user . roles : raise HTTPException ( status_code = 403 , detail = f 'Role \" { role } \" is required to perform this action' ) return user return current_user","title":"get_current_user()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.get_identity_providers","text":"Returns all configured identity Providers Returns: Type Description List[KeycloakIdentityProvider] All configured identity providers Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakIdentityProvider , is_list = True ) def get_identity_providers ( self ) -> List [ KeycloakIdentityProvider ]: \"\"\" Returns all configured identity Providers Returns: List[KeycloakIdentityProvider]: All configured identity providers \"\"\" return self . _admin_request ( url = self . providers_uri , method = HTTPMethod . GET ) . json ()","title":"get_identity_providers()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.get_roles","text":"Returns full entries of Roles based on role names Parameters: Name Type Description Default role_names List[str] Roles that should be looked up (names) required Returns: Type Description List[KeycloakRole] Full entries stored at Keycloak. Notes The Keycloak RestAPI will only identify RoleRepresentations that use name AND id which is the only reason for existence of this function Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_roles ( self , role_names : List [ str ]) -> List [ KeycloakRole ]: \"\"\" Returns full entries of Roles based on role names Args: role_names List[str]: Roles that should be looked up (names) Returns: List[KeycloakRole]: Full entries stored at Keycloak. Notes: - The Keycloak RestAPI will only identify RoleRepresentations that use name AND id which is the only reason for existence of this function \"\"\" roles = self . get_all_roles () return list ( filter ( lambda role : role . name in role_names , roles ))","title":"get_roles()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.get_user","text":"Queries the keycloak API for a specific user either based on its ID or any native attribute Parameters: Name Type Description Default user_id str The user ID of interest None query str Query string. e.g. email=testuser@codespecialist.com or username=codespecialist '' Returns: Type Description KeycloakUser If the user was found Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakUser ) def get_user ( self , user_id : str = None , query : str = \"\" ) -> KeycloakUser : \"\"\" Queries the keycloak API for a specific user either based on its ID or any **native** attribute Args: user_id (str): The user ID of interest query: Query string. e.g. `email=testuser@codespecialist.com` or `username=codespecialist` Returns: KeycloakUser: If the user was found \"\"\" if user_id is None : response = self . _admin_request ( url = f ' { self . users_uri } ? { query } ' , method = HTTPMethod . GET ) return KeycloakUser ( ** response . json ()[ 0 ]) else : response = self . _admin_request ( url = f ' { self . users_uri } / { user_id } ' , method = HTTPMethod . GET ) return KeycloakUser ( ** response . json ())","title":"get_user()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.get_user_roles","text":"Gets all roles of an user Parameters: Name Type Description Default user_id str ID of the user of interest required Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakRole , is_list = True ) def get_user_roles ( self , user_id : str ) -> List [ KeycloakRole ]: \"\"\" Gets all roles of an user Args: user_id (str): ID of the user of interest Returns: \"\"\" return self . _admin_request ( url = f ' { self . users_uri } / { user_id } /role-mappings/realm' , method = HTTPMethod . GET )","title":"get_user_roles()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.token_is_valid","text":"Validates an access token, optionally also its audience Parameters: Name Type Description Default token str The token to be verified required audience str Optional audience. Will be checked if provided None Returns: Type Description bool True if the token is valid Source code in fastapi_keycloak/api.py def token_is_valid ( self , token : str , audience : str = None ) -> bool : \"\"\" Validates an access token, optionally also its audience Args: token (str): The token to be verified audience (str): Optional audience. Will be checked if provided Returns: bool: True if the token is valid \"\"\" try : options = { \"verify_signature\" : True , \"verify_aud\" : audience is not None , \"verify_exp\" : True } jwt . decode ( token , self . public_key , options = options , audience = audience ) return True except ( ExpiredSignatureError , JWTError ): return False","title":"token_is_valid()"},{"location":"docs/reference/#fastapi_keycloak.api.FastAPIKeycloak.user_login","text":"Models the password OAuth2 flow. Exchanges username and password for an access token. Parameters: Name Type Description Default username str Username used for login required password str Password of the user required Returns: Type Description KeycloakToken If the exchange succeeds Source code in fastapi_keycloak/api.py @result_or_error ( response_model = KeycloakToken ) def user_login ( self , username : str , password : str ) -> KeycloakToken : \"\"\" Models the password OAuth2 flow. Exchanges username and password for an access token. Args: username (str): Username used for login password (str): Password of the user Returns: KeycloakToken: If the exchange succeeds \"\"\" headers = { \"Content-Type\" : \"application/x-www-form-urlencoded\" } data = { \"client_id\" : self . client_id , \"client_secret\" : self . client_secret , \"username\" : username , \"password\" : password , \"grant_type\" : \"password\" } response = requests . post ( url = self . token_uri , headers = headers , data = data ) return response","title":"user_login()"},{"location":"venv/lib/python3.8/site-packages/","text":"Pure Python RSA implementation Python-RSA is a pure-Python RSA implementation. It supports encryption and decryption, signing and verifying signatures, and key generation according to PKCS#1 version 1.5. It can be used as a Python library as well as on the commandline. The code was mostly written by Sybren A. St\u00fcvel. Documentation can be found at the Python-RSA homepage . For all changes, check the changelog . Download and install using: pip install rsa or download it from the Python Package Index . The source code is maintained at GitHub and is licensed under the Apache License, version 2.0 Security Because of how Python internally stores numbers, it is very hard (if not impossible) to make a pure-Python program secure against timing attacks. This library is no exception, so use it with care. See https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/ for more info. Setup of Development Environment python3 -m venv .venv . ./.venv/bin/activate pip install poetry poetry install Publishing a New Release . ./.venv/bin/activate poetry publish --build","title":"Pure Python RSA implementation"},{"location":"venv/lib/python3.8/site-packages/#pure-python-rsa-implementation","text":"Python-RSA is a pure-Python RSA implementation. It supports encryption and decryption, signing and verifying signatures, and key generation according to PKCS#1 version 1.5. It can be used as a Python library as well as on the commandline. The code was mostly written by Sybren A. St\u00fcvel. Documentation can be found at the Python-RSA homepage . For all changes, check the changelog . Download and install using: pip install rsa or download it from the Python Package Index . The source code is maintained at GitHub and is licensed under the Apache License, version 2.0","title":"Pure Python RSA implementation"},{"location":"venv/lib/python3.8/site-packages/#security","text":"Because of how Python internally stores numbers, it is very hard (if not impossible) to make a pure-Python program secure against timing attacks. This library is no exception, so use it with care. See https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/ for more info.","title":"Security"},{"location":"venv/lib/python3.8/site-packages/#setup-of-development-environment","text":"python3 -m venv .venv . ./.venv/bin/activate pip install poetry poetry install","title":"Setup of Development Environment"},{"location":"venv/lib/python3.8/site-packages/#publishing-a-new-release","text":". ./.venv/bin/activate poetry publish --build","title":"Publishing a New Release"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/","text":"Python-RSA changelog Version 4.8 - in development Switch to Poetry for dependency and release management. Compatibility with Python 3.10. Chain exceptions using raise new_exception from old_exception ( #157 ) Added marker file for PEP 561. This will allow type checking tools in dependent projects to use type annotations from Python-RSA ( #136 ). Use the Chinese Remainder Theorem when decrypting with a private key. This makes decryption 2-4x faster ( #163 ). Version 4.7.2 - released 2021-02-24 Fix picking/unpickling issue introduced in 4.7 ( #173 ) Version 4.7.1 - released 2021-02-15 Fix threading issue introduced in 4.7 ( #173 ) Version 4.7 - released 2021-01-10 Fix #165 : CVE-2020-25658 - Bleichenbacher-style timing oracle in PKCS#1 v1.5 decryption code Add padding length check as described by PKCS#1 v1.5 (Fixes #164 ) Reuse of blinding factors to speed up blinding operations. Fixes #162 . Declare & test support for Python 3.9 Version 4.4 & 4.6 - released 2020-06-12 Version 4.4 and 4.6 are almost a re-tagged release of version 4.2. It requires Python 3.5+. To avoid older Python installations from trying to upgrade to RSA 4.4, this is now made explicit in the python_requires argument in setup.py . There was a mistake releasing 4.4 as \"3.5+ only\", which made it necessary to retag 4.4 as 4.6 as well. No functional changes compared to version 4.2. Version 4.3 & 4.5 - released 2020-06-12 Version 4.3 and 4.5 are almost a re-tagged release of version 4.0. It is the last to support Python 2.7. This is now made explicit in the python_requires argument in setup.py . Python 3.4 is not supported by this release. There was a mistake releasing 4.4 as \"3.5+ only\", which made it necessary to retag 4.3 as 4.5 as well. Two security fixes have also been backported, so 4.3 = 4.0 + these two fixes. Choose blinding factor relatively prime to N. Thanks Christian Heimes for pointing this out. Reject cyphertexts (when decrypting) and signatures (when verifying) that have been modified by prepending zero bytes. This resolves CVE-2020-13757. Thanks Carnil for pointing this out. Version 4.2 - released 2020-06-10 Rolled back the switch to Poetry, and reverted back to using Pipenv + setup.py for dependency management. There apparently is an issue no-binary installs of packages build with Poetry. This fixes #148 Limited SHA3 support to those Python versions (3.6+) that support it natively. The third-party library that adds support for this to Python 3.5 is a binary package, and thus breaks the pure-Python nature of Python-RSA. This should fix #147 . Version 4.1 - released 2020-06-10 Added support for Python 3.8. Dropped support for Python 2 and 3.4. Added type annotations to the source code. This will make Python-RSA easier to use in your IDE, and allows better type checking. Added static type checking via MyPy . Fix #129 Installing from source gives UnicodeDecodeError. Switched to using Poetry for package management. Added support for SHA3 hashing: SHA3-256, SHA3-384, SHA3-512. This is natively supported by Python 3.6+ and supported via a third-party library on Python 3.5. Choose blinding factor relatively prime to N. Thanks Christian Heimes for pointing this out. Reject cyphertexts (when decrypting) and signatures (when verifying) that have been modified by prepending zero bytes. This resolves CVE-2020-13757. Thanks Adelapie for pointing this out. Version 4.0 - released 2018-09-16 Removed deprecated modules: rsa.varblock rsa.bigfile rsa._version133 rsa._version200 Removed CLI commands that use the VARBLOCK/bigfile format. Ensured that PublicKey.save_pkcs1() and PrivateKey.save_pkcs1() always return bytes. Dropped support for Python 2.6 and 3.3. Dropped support for Psyco. Miller-Rabin iterations determined by bitsize of key. #58 Added function rsa.find_signature_hash() to return the name of the hashing algorithm used to sign a message. rsa.verify() now also returns that name, instead of always returning True . #78 Add support for SHA-224 for PKCS1 signatures. #104 Transitioned from requirements.txt to Pipenv for package management. Version 3.4.2 - released 2016-03-29 Fixed dates in CHANGELOG.txt Version 3.4.1 - released 2016-03-26 Included tests/private.pem in MANIFEST.in Included README.md and CHANGELOG.txt in MANIFEST.in Version 3.4 - released 2016-03-17 Moved development to GitHub: https://github.com/sybrenstuvel/python-rsa Solved side-channel vulnerability by implementing blinding, fixes #19 Deprecated the VARBLOCK format and rsa.bigfile module due to security issues, see https://github.com/sybrenstuvel/python-rsa/issues/13 Integration with Travis-CI [1], Coveralls [2] and Code Climate [3] Deprecated the old rsa._version133 and rsa._version200 submodules, they will be completely removed in version 4.0. Add an 'exponent' argument to key.newkeys() Switched from Solovay-Strassen to Miller-Rabin primality testing, to comply with NIST FIPS 186-4 [4] as probabilistic primality test (Appendix C, subsection C.3): Fixed bugs #12, #14, #27, #30, #49 [1] https://travis-ci.org/sybrenstuvel/python-rsa [2] https://coveralls.io/github/sybrenstuvel/python-rsa [3] https://codeclimate.com/github/sybrenstuvel/python-rsa [4] http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf Version 3.3 - released 2016-01-13 Thanks to Filippo Valsorda: Fix BB'06 attack in verify() by switching from parsing to comparison. See [1] for more information. Simplified Tox configuration and dropped Python 3.2 support. The coverage package uses a u'' prefix, which was reintroduced in 3.3 for ease of porting. [1] https://blog.filippo.io/bleichenbacher-06-signature-forgery-in-python-rsa/ Version 3.2.3 - released 2015-11-05 Added character encoding markers for Python 2.x Version 3.2.1 - released 2015-11-05 Added per-file licenses Added support for wheel packages Made example code more consistent and up to date with Python 3.4 Version 3.2 - released 2015-07-29 Mentioned support for Python 3 in setup.py Version 3.1.4 - released 2014-02-22 Fixed some bugs Version 3.1.3 - released 2014-02-02 Dropped support for Python 2.5 Version 3.1.2 - released 2013-09-15 Added Python 3.3 to the test environment. Removed dependency on Distribute Added support for loading public keys from OpenSSL Version 3.1.1 - released 2012-06-18 Fixed doctests for Python 2.7 Removed obsolete unittest so all tests run fine on Python 3.2 Version 3.1 - released 2012-06-17 Big, big credits to Yesudeep Mangalapilly for all the changes listed below! Added ability to generate keys on multiple cores simultaneously. Massive speedup Partial Python 3.2 compatibility (core functionality works, but saving or loading keys doesn't, for that the pyasn1 package needs to be ported to Python 3 first) Lots of bug fixes Version 3.0.1 - released 2011-08-07 Removed unused import of abc module Version 3.0 - released 2011-08-05 Changed the meaning of the keysize to mean the size of n rather than the size of both p and q . This is the common interpretation of RSA keysize. To get the old behaviour, double the keysize when generating a new key. Added a lot of doctests Added random-padded encryption and decryption using PKCS#1 version 1.5 Added hash-based signatures and verification using PKCS#1v1.5 Modeling private and public key as real objects rather than dicts. Support for saving and loading keys as PEM and DER files. Ability to extract a public key from a private key (PEM+DER) Version 2.0 Security improvements by Barry Mead.","title":"Python-RSA changelog"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#python-rsa-changelog","text":"","title":"Python-RSA changelog"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-48-in-development","text":"Switch to Poetry for dependency and release management. Compatibility with Python 3.10. Chain exceptions using raise new_exception from old_exception ( #157 ) Added marker file for PEP 561. This will allow type checking tools in dependent projects to use type annotations from Python-RSA ( #136 ). Use the Chinese Remainder Theorem when decrypting with a private key. This makes decryption 2-4x faster ( #163 ).","title":"Version 4.8 - in development"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-472-released-2021-02-24","text":"Fix picking/unpickling issue introduced in 4.7 ( #173 )","title":"Version 4.7.2 - released 2021-02-24"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-471-released-2021-02-15","text":"Fix threading issue introduced in 4.7 ( #173 )","title":"Version 4.7.1 - released 2021-02-15"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-47-released-2021-01-10","text":"Fix #165 : CVE-2020-25658 - Bleichenbacher-style timing oracle in PKCS#1 v1.5 decryption code Add padding length check as described by PKCS#1 v1.5 (Fixes #164 ) Reuse of blinding factors to speed up blinding operations. Fixes #162 . Declare & test support for Python 3.9","title":"Version 4.7 - released 2021-01-10"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-44-46-released-2020-06-12","text":"Version 4.4 and 4.6 are almost a re-tagged release of version 4.2. It requires Python 3.5+. To avoid older Python installations from trying to upgrade to RSA 4.4, this is now made explicit in the python_requires argument in setup.py . There was a mistake releasing 4.4 as \"3.5+ only\", which made it necessary to retag 4.4 as 4.6 as well. No functional changes compared to version 4.2.","title":"Version 4.4 &amp; 4.6 - released 2020-06-12"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-43-45-released-2020-06-12","text":"Version 4.3 and 4.5 are almost a re-tagged release of version 4.0. It is the last to support Python 2.7. This is now made explicit in the python_requires argument in setup.py . Python 3.4 is not supported by this release. There was a mistake releasing 4.4 as \"3.5+ only\", which made it necessary to retag 4.3 as 4.5 as well. Two security fixes have also been backported, so 4.3 = 4.0 + these two fixes. Choose blinding factor relatively prime to N. Thanks Christian Heimes for pointing this out. Reject cyphertexts (when decrypting) and signatures (when verifying) that have been modified by prepending zero bytes. This resolves CVE-2020-13757. Thanks Carnil for pointing this out.","title":"Version 4.3 &amp; 4.5 - released 2020-06-12"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-42-released-2020-06-10","text":"Rolled back the switch to Poetry, and reverted back to using Pipenv + setup.py for dependency management. There apparently is an issue no-binary installs of packages build with Poetry. This fixes #148 Limited SHA3 support to those Python versions (3.6+) that support it natively. The third-party library that adds support for this to Python 3.5 is a binary package, and thus breaks the pure-Python nature of Python-RSA. This should fix #147 .","title":"Version 4.2 - released 2020-06-10"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-41-released-2020-06-10","text":"Added support for Python 3.8. Dropped support for Python 2 and 3.4. Added type annotations to the source code. This will make Python-RSA easier to use in your IDE, and allows better type checking. Added static type checking via MyPy . Fix #129 Installing from source gives UnicodeDecodeError. Switched to using Poetry for package management. Added support for SHA3 hashing: SHA3-256, SHA3-384, SHA3-512. This is natively supported by Python 3.6+ and supported via a third-party library on Python 3.5. Choose blinding factor relatively prime to N. Thanks Christian Heimes for pointing this out. Reject cyphertexts (when decrypting) and signatures (when verifying) that have been modified by prepending zero bytes. This resolves CVE-2020-13757. Thanks Adelapie for pointing this out.","title":"Version 4.1 - released 2020-06-10"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-40-released-2018-09-16","text":"Removed deprecated modules: rsa.varblock rsa.bigfile rsa._version133 rsa._version200 Removed CLI commands that use the VARBLOCK/bigfile format. Ensured that PublicKey.save_pkcs1() and PrivateKey.save_pkcs1() always return bytes. Dropped support for Python 2.6 and 3.3. Dropped support for Psyco. Miller-Rabin iterations determined by bitsize of key. #58 Added function rsa.find_signature_hash() to return the name of the hashing algorithm used to sign a message. rsa.verify() now also returns that name, instead of always returning True . #78 Add support for SHA-224 for PKCS1 signatures. #104 Transitioned from requirements.txt to Pipenv for package management.","title":"Version 4.0 - released 2018-09-16"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-342-released-2016-03-29","text":"Fixed dates in CHANGELOG.txt","title":"Version 3.4.2 - released 2016-03-29"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-341-released-2016-03-26","text":"Included tests/private.pem in MANIFEST.in Included README.md and CHANGELOG.txt in MANIFEST.in","title":"Version 3.4.1 - released 2016-03-26"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-34-released-2016-03-17","text":"Moved development to GitHub: https://github.com/sybrenstuvel/python-rsa Solved side-channel vulnerability by implementing blinding, fixes #19 Deprecated the VARBLOCK format and rsa.bigfile module due to security issues, see https://github.com/sybrenstuvel/python-rsa/issues/13 Integration with Travis-CI [1], Coveralls [2] and Code Climate [3] Deprecated the old rsa._version133 and rsa._version200 submodules, they will be completely removed in version 4.0. Add an 'exponent' argument to key.newkeys() Switched from Solovay-Strassen to Miller-Rabin primality testing, to comply with NIST FIPS 186-4 [4] as probabilistic primality test (Appendix C, subsection C.3): Fixed bugs #12, #14, #27, #30, #49 [1] https://travis-ci.org/sybrenstuvel/python-rsa [2] https://coveralls.io/github/sybrenstuvel/python-rsa [3] https://codeclimate.com/github/sybrenstuvel/python-rsa [4] http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf","title":"Version 3.4 - released 2016-03-17"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-33-released-2016-01-13","text":"Thanks to Filippo Valsorda: Fix BB'06 attack in verify() by switching from parsing to comparison. See [1] for more information. Simplified Tox configuration and dropped Python 3.2 support. The coverage package uses a u'' prefix, which was reintroduced in 3.3 for ease of porting. [1] https://blog.filippo.io/bleichenbacher-06-signature-forgery-in-python-rsa/","title":"Version 3.3 - released 2016-01-13"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-323-released-2015-11-05","text":"Added character encoding markers for Python 2.x","title":"Version 3.2.3 - released 2015-11-05"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-321-released-2015-11-05","text":"Added per-file licenses Added support for wheel packages Made example code more consistent and up to date with Python 3.4","title":"Version 3.2.1 - released 2015-11-05"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-32-released-2015-07-29","text":"Mentioned support for Python 3 in setup.py","title":"Version 3.2 - released 2015-07-29"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-314-released-2014-02-22","text":"Fixed some bugs","title":"Version 3.1.4 - released 2014-02-22"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-313-released-2014-02-02","text":"Dropped support for Python 2.5","title":"Version 3.1.3 - released 2014-02-02"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-312-released-2013-09-15","text":"Added Python 3.3 to the test environment. Removed dependency on Distribute Added support for loading public keys from OpenSSL","title":"Version 3.1.2 - released 2013-09-15"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-311-released-2012-06-18","text":"Fixed doctests for Python 2.7 Removed obsolete unittest so all tests run fine on Python 3.2","title":"Version 3.1.1 - released 2012-06-18"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-31-released-2012-06-17","text":"Big, big credits to Yesudeep Mangalapilly for all the changes listed below! Added ability to generate keys on multiple cores simultaneously. Massive speedup Partial Python 3.2 compatibility (core functionality works, but saving or loading keys doesn't, for that the pyasn1 package needs to be ported to Python 3 first) Lots of bug fixes","title":"Version 3.1 - released 2012-06-17"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-301-released-2011-08-07","text":"Removed unused import of abc module","title":"Version 3.0.1 - released 2011-08-07"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-30-released-2011-08-05","text":"Changed the meaning of the keysize to mean the size of n rather than the size of both p and q . This is the common interpretation of RSA keysize. To get the old behaviour, double the keysize when generating a new key. Added a lot of doctests Added random-padded encryption and decryption using PKCS#1 version 1.5 Added hash-based signatures and verification using PKCS#1v1.5 Modeling private and public key as real objects rather than dicts. Support for saving and loading keys as PEM and DER files. Ability to extract a public key from a private key (PEM+DER)","title":"Version 3.0 - released 2011-08-05"},{"location":"venv/lib/python3.8/site-packages/CHANGELOG/#version-20","text":"Security improvements by Barry Mead.","title":"Version 2.0"},{"location":"venv/lib/python3.8/site-packages/Markdown-3.3.6.dist-info/LICENSE/","text":"Copyright 2007, 2008 The Python Markdown Project (v. 1.7 and later) Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b) Copyright 2004 Manfred Stienstra (the original version) All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the Python Markdown Project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE PYTHON MARKDOWN PROJECT ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ANY CONTRIBUTORS TO THE PYTHON MARKDOWN PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"},{"location":"venv/lib/python3.8/site-packages/idna-3.3.dist-info/LICENSE/","text":"BSD 3-Clause License Copyright (c) 2013-2021, Kim Davies All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"},{"location":"venv/lib/python3.8/site-packages/mkdocs_material_extensions-1.0.3.dist-info/LICENSE/","text":"MIT License Copyright (c) 2021 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"venv/lib/python3.8/site-packages/mkdocs_same_dir-0.1.1.dist-info/LICENSE/","text":"MIT License Copyright (c) 2020 Oleh Prypin oleh@pryp.in Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"venv/lib/python3.8/site-packages/pymdown_extensions-9.1.dist-info/LICENSE/","text":"License PyMdown Extensions The MIT License (MIT) (Except where stated below) Copyright (c) 2014 - 2021 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. SuperFences superfences.py is derived from Python Markdown's fenced_code extension. Fenced Code Extension for Python Markdown ========================================= This extension adds Fenced Code Blocks to Python-Markdown. See <https://python-markdown.github.io/extensions/fenced_code_blocks/> for documentation. Original code Copyright 2007-2008 [Waylan Limberg](http://achinghead.com/). All changes Copyright 2008-2014 The Python Markdown Project License: [BSD](http://www.opensource.org/licenses/bsd-license.php) Highlight highlight.py is derived from Python Markdown's CodeHilite extension. CodeHilite Extension for Python-Markdown ======================================== Adds code/syntax highlighting to standard Python-Markdown code blocks. See <https://python-markdown.github.io/extensions/code_hilite/> for documentation. Original code Copyright 2006-2008 [Waylan Limberg](http://achinghead.com/). All changes Copyright 2008-2014 The Python Markdown Project License: [BSD](http://www.opensource.org/licenses/bsd-license.php) Gemoji Index gemoji_db.py is generated from Gemoji's source code: @github/gemoji. Copyright (c) 2013 GitHub, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. EmojiOne Index emoji1_db.py is generated from EmojiOne's source code: @Ranks/emojione EmojiOne Non-Artwork Applies to the JavaScript, JSON, PHP, CSS, HTML files, and everything else not covered under the artwork license above. License: MIT Complete Legal Terms: http://opensource.org/licenses/MIT","title":"License"},{"location":"venv/lib/python3.8/site-packages/pymdown_extensions-9.1.dist-info/LICENSE/#license","text":"","title":"License"},{"location":"venv/lib/python3.8/site-packages/pymdown_extensions-9.1.dist-info/LICENSE/#pymdown-extensions","text":"The MIT License (MIT) (Except where stated below) Copyright (c) 2014 - 2021 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"PyMdown Extensions"},{"location":"venv/lib/python3.8/site-packages/pymdown_extensions-9.1.dist-info/LICENSE/#superfences","text":"superfences.py is derived from Python Markdown's fenced_code extension. Fenced Code Extension for Python Markdown ========================================= This extension adds Fenced Code Blocks to Python-Markdown. See <https://python-markdown.github.io/extensions/fenced_code_blocks/> for documentation. Original code Copyright 2007-2008 [Waylan Limberg](http://achinghead.com/). All changes Copyright 2008-2014 The Python Markdown Project License: [BSD](http://www.opensource.org/licenses/bsd-license.php)","title":"SuperFences"},{"location":"venv/lib/python3.8/site-packages/pymdown_extensions-9.1.dist-info/LICENSE/#highlight","text":"highlight.py is derived from Python Markdown's CodeHilite extension. CodeHilite Extension for Python-Markdown ======================================== Adds code/syntax highlighting to standard Python-Markdown code blocks. See <https://python-markdown.github.io/extensions/code_hilite/> for documentation. Original code Copyright 2006-2008 [Waylan Limberg](http://achinghead.com/). All changes Copyright 2008-2014 The Python Markdown Project License: [BSD](http://www.opensource.org/licenses/bsd-license.php)","title":"Highlight"},{"location":"venv/lib/python3.8/site-packages/pymdown_extensions-9.1.dist-info/LICENSE/#gemoji-index","text":"gemoji_db.py is generated from Gemoji's source code: @github/gemoji. Copyright (c) 2013 GitHub, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Gemoji Index"},{"location":"venv/lib/python3.8/site-packages/pymdown_extensions-9.1.dist-info/LICENSE/#emojione-index","text":"emoji1_db.py is generated from EmojiOne's source code: @Ranks/emojione EmojiOne Non-Artwork Applies to the JavaScript, JSON, PHP, CSS, HTML files, and everything else not covered under the artwork license above. License: MIT Complete Legal Terms: http://opensource.org/licenses/MIT","title":"EmojiOne Index"},{"location":"venv/lib/python3.8/site-packages/starlette-0.16.0.dist-info/LICENSE/","text":"Copyright \u00a9 2018, Encode OSS Ltd . All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"},{"location":"venv/lib/python3.8/site-packages/uvicorn-0.16.0.dist-info/LICENSE/","text":"Copyright \u00a9 2017-present, Encode OSS Ltd . All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"}]}